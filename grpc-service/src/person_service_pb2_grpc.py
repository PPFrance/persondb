# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import person_service_pb2 as person__service__pb2


class PersonStub(object):
  """The person service definition. All we'll do for now is query on the name and get back the country.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetPerson = channel.unary_unary(
        '/personapp.Person/GetPerson',
        request_serializer=person__service__pb2.PersonRequest.SerializeToString,
        response_deserializer=person__service__pb2.PersonResponse.FromString,
        )


class PersonServicer(object):
  """The person service definition. All we'll do for now is query on the name and get back the country.
  """

  def GetPerson(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PersonServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetPerson': grpc.unary_unary_rpc_method_handler(
          servicer.GetPerson,
          request_deserializer=person__service__pb2.PersonRequest.FromString,
          response_serializer=person__service__pb2.PersonResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'personapp.Person', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
